continue
y_predict
quit
y_predict
quit
y_predict
y_predict.row(2)
y_predict.row(1)
y_predict.row(0)
quit
s_output.column_size
s_output.row_size
continue
x_hidden.row_size
x_hidden.column_size
@weights_jk.row_size
@weights_jk.column_size
quit
@weights_jk.column_size
@weights_jk.row_size
x_hidden.column_size
x_hidden.row_size
quit
x_hidden
quit
weights_ij.column_size
weights_ij.row_size
weights_ij
quit
@weights_ij.row_sizequit
@weights_ij.row_size
@weighs_ij
@weighs_ij.row_size
x.column_size
x.row_size
quit
x.column_size
x.row_size
x
quit
x_hidden
delta_output
weights_ij.column_size
weights_ij.row_size
(delta_hidden.transpose * x_rand).transpose.column_size
(delta_hidden.transpose * x_rand).transpose.row_size
(delta_hidden.transpose * x_rand).transpose
delta_hidden.transpose * x_rand
delta_hidden * x_rand
x_rand
weights_jk.column_size
weights_jk.col_size
weights_jk.row_size
weights_ij.column_size
weights_ij.col_size
weights_ij.row_size
weights_ij
x_rand
delta_hidden
quit
delta_hidden
quit
dh_size
hd_size
x_hidden
weights_jk.column_size
weights_jk.row_size
delta_output
dh_size
quit
s_output
s_hidden
weights_jk.column_size
weights_jk.row_size
weights_jk
delta_output
helta_output
x_hidden
y
delta_output
x_hidden
x_hiddent
quit
delta_output
quit
y - output
output
y
s_output
quit
y[0,2]
y[0,1]
y.row(0)
y.row(1)
y.each { |e| p e }
y.each { p e }
y.each do { p e }
y.each do { |e| p e }
derv_tanh(s_output)
output
y
quit
y_rand - output
quit
output
quit
output
y_rand
quit
output
quit
output
quit
s_output.row(0).map { |e| Math.tanh(e) }
s_output
weights_jk
output
quit
s_output.row(0)[0]
s_output.row(0)
s_output
quit
[1] + (s_hidden.row(0).map { |e| Math.tanh(e) }).to_a
(s_hidden.row(0).map { |e| Math.tanh(e) }).to_a
(s_hidden.row(0).map { |e| Math.tanh(e) }).unshift(1)
Vector[1] + s_hidden.row(0).map { |e| Math.tanh(e) }
[1] + s_hidden.row(0).map { |e| Math.tanh(e) }
s_hidden.row(0).map { |e| Math.tanh(e) }
Matrix.rows(s_hidden.row(0).map { |e| Math.tanh(e) })
Matrix.rows([s_hidden.row(0).map { |e| Math.tanh(e) }])
s_hidden.row(0).map { |e| Math.tanh(e) }
s_hidden.row(0)
s_hidden.to_a
s_hidden.to_s
x_hidden
s_hidden
s_hiddent
weights_ij
weighst_ij
weight_ij
x
quit
x.row_size
x
x.class
quit
y_rand.class
y_rand
Matrix.rows([x_rand])
Matrix.rows(x_rand)
x_rand.class
x_rand
quit
x.row(1)
x.row_size
x
quit
x.row_size
x
x_hidden.row_size
x_hidden
x_hiddent
quit
x_test.row(1)
x_test.row[1]
x_test.column_size
x_test.row_size
quit
y
x
x.class
data.class
data.class?
y_test.row_size
y_test.column_size
x_test.column_size
x_test.col_size
x_test.row_size
x_test.size
x_test.dim
x_test.dimension
x_test.row
x_test.rows
x_test
quit
n
d1
quit
normalize
n
y
n
quit
restart
next
step
data[1][0,4]
data[1]
data
x
quit
predicted
expected
cm
